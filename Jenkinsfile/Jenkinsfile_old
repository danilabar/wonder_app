#!groovy
// Run docker build
pipeline {
    agent {
        label 'built-in'
        }
    triggers { pollSCM('* * * * *') }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    environment {
    BUILD_TAG_NAME = '0.1.$BUILD_ID'
    IMAGE_BASE = "danilabar/wonder_app"
    DOCKER_REPO_NAME = 'danilabar'
    IMAGE_NAME = "wonder_app"
    CHART_NAME = 'wonder-app-chart'
    LATEST_BUILD_TAG_NAME = 'latest'
    }
    stages {
        stage("docker login") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker_cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login -u $USERNAME --password $PASSWORD
                    """
                }
            }
        }
        stage("create docker image") {
            steps {
                dir ('.') {
                	sh """
                    docker build -t $IMAGE_BASE:$BUILD_TAG_NAME .
                    """
                }
            }
        }
        stage("create docker image latest") {
            when { buildingTag() }
            steps {
                dir ('.') {
                	sh """
                    docker build -t $IMAGE_BASE:$LATEST_BUILD_TAG_NAME .
                    """
                }
            }
        }
        stage("docker push") {
            steps {
                sh """
                docker push -a $IMAGE_BASE
                """
            }
        }
        stage("docker clear images") {
            steps {
                sh 'docker rmi -f $(docker images -a -q)'
            }
        }
        stage("deploy app") {
            when { buildingTag() }
            steps {
                sh """
                helm upgrade app-prod wonder-app-chart --set image_frontend.tag=$LATEST_BUILD_TAG_NAME --install
                """
            }
        }
    }
    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}